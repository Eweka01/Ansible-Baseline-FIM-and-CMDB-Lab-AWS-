---
# =============================================================================
# Ansible Baseline Setup Playbook
# =============================================================================
#
# This playbook establishes a secure baseline configuration for all lab hosts.
# It provides a foundation for consistent system configuration across different
# environments and operating systems. This playbook uses Ansible roles to
# organize and modularize the baseline configuration tasks.
#
# What this playbook does:
# 1. Applies system baseline configuration (users, groups, directories)
# 2. Implements security hardening measures (SSH, firewall, audit)
# 3. Manages package installation and updates
# 4. Configures network settings and connectivity
# 5. Sets up centralized logging and log rotation
# 6. Configures monitoring and alerting (optional)
# 7. Sets up backup procedures (optional)
# 8. Creates completion markers and logs
#
# Usage:
#   ansible-playbook -i inventory/hosts playbooks/setup-baseline.yml
#   ansible-playbook -i inventory/hosts playbooks/setup-baseline.yml --tags security
#   ansible-playbook -i inventory/hosts playbooks/setup-baseline.yml --skip-tags backup
#
# Tags available:
#   - baseline: All baseline configuration tasks
#   - system: System-level configuration (users, directories, permissions)
#   - security: Security hardening measures
#   - packages: Package management and installation
#   - network: Network configuration and connectivity
#   - logging: Logging setup and configuration
#   - monitoring: Monitoring and alerting setup
#   - backup: Backup configuration and procedures
#
# Author: Ansible Baseline, FIM, and CMDB Lab
# Version: 1.0.0
# =============================================================================

- name: "Lab Environment Baseline Configuration"
  hosts: all                    # Target all hosts in the inventory
  become: yes                   # Run tasks with sudo/root privileges
  gather_facts: yes             # Collect system information (OS, IP, etc.)
  
  vars:
    playbook_start_time: "{{ ansible_date_time.iso8601 }}"  # Record when playbook started
  
  # =============================================================================
  # PRE-TASKS: Initial Setup and Information Display
  # =============================================================================
  # These tasks run before the main baseline configuration to display
  # information about what's being configured and when the process started.
  
  pre_tasks:
    # Display information about the baseline configuration process
    # This helps you understand what's happening during the setup
    - name: "Display playbook information"
      debug:
        msg:
          - "Starting baseline configuration for {{ inventory_hostname }}"
          - "Environment: {{ environment | default('development') }}"
          - "Playbook started at: {{ playbook_start_time }}"
  
  # =============================================================================
  # ROLES: Baseline Configuration Components
  # =============================================================================
  # This playbook uses Ansible roles to organize and modularize the baseline
  # configuration. Each role handles a specific aspect of system configuration.
  # Roles can be run individually using tags for targeted configuration.
  
  roles:
    # System Baseline Role - Core system configuration
    # Handles: users, groups, directories, file permissions, system settings
    - role: system_baseline
      tags: [baseline, system]           # Can be run with --tags system or --tags baseline
    
    # Security Hardening Role - Security configuration
    # Handles: SSH hardening, firewall rules, audit configuration, security policies
    - role: security_hardening
      tags: [baseline, security]         # Can be run with --tags security or --tags baseline
    
    # Package Management Role - Software installation and updates
    # Handles: package installation, repository configuration, system updates
    - role: package_management
      tags: [baseline, packages]         # Can be run with --tags packages or --tags baseline
    
    # Network Configuration Role - Network settings
    # Handles: network interfaces, routing, DNS configuration, network security
    - role: network_config
      tags: [baseline, network]          # Can be run with --tags network or --tags baseline
    
    # Logging Setup Role - Centralized logging
    # Handles: log rotation, centralized logging, log monitoring, audit trails
    - role: logging_setup
      tags: [baseline, logging]          # Can be run with --tags logging or --tags baseline
    
    # Monitoring Setup Role - System monitoring (optional)
    # Handles: monitoring agents, alerting, performance monitoring, health checks
    - role: monitoring_setup
      tags: [baseline, monitoring]       # Can be run with --tags monitoring or --tags baseline
      when: monitoring.enabled | default(true)  # Only run if monitoring is enabled
    
    # Backup Setup Role - Backup configuration (optional)
    # Handles: backup schedules, backup storage, recovery procedures, data protection
    - role: backup_setup
      tags: [baseline, backup]           # Can be run with --tags backup or --tags baseline
      when: backup.enabled | default(false)     # Only run if backup is enabled
  
  # =============================================================================
  # POST-TASKS: Finalization and Completion
  # =============================================================================
  # These tasks run after all roles have been executed to finalize the
  # baseline configuration, gather final system information, and create
  # completion markers and logs.
  
  post_tasks:
    # Gather final system facts after baseline configuration
    # This provides updated system information after all changes have been applied
    - name: "Gather final system facts"
      setup:
        gather_subset: min              # Only gather minimal facts (faster execution)
    
    # Display comprehensive completion information
    # Shows system status and configuration summary after baseline setup
    - name: "Display completion information"
      debug:
        msg:
          - "Baseline configuration completed for {{ inventory_hostname }}"
          - "System uptime: {{ ansible_uptime_seconds | int // 3600 }} hours"
          - "Available memory: {{ ansible_memtotal_mb }} MB"
          - "CPU cores: {{ ansible_processor_vcpus }}"
    
    # Create a marker file to indicate baseline configuration is complete
    # This file can be used by other playbooks to check if baseline is already applied
    - name: "Create baseline completion marker"
      file:
        path: /etc/ansible-baseline-completed  # Marker file location
        state: touch                           # Create empty file
        mode: '0644'                          # Set file permissions
      when: ansible_os_family == "RedHat" or ansible_os_family == "Debian"  # Only on supported OS families
    
    # Log the baseline completion for audit and tracking purposes
    # This creates a permanent record of when baseline was applied
    - name: "Log baseline completion"
      lineinfile:
        path: /var/log/ansible-baseline.log    # Log file location
        line: "{{ ansible_date_time.iso8601 }} - Baseline configuration completed on {{ inventory_hostname }}"
        create: yes                            # Create log file if it doesn't exist
        mode: '0644'                          # Set file permissions

